plugins {
    id 'scala'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
    id "com.diffplug.gradle.spotless" version "3.27.1"
}

group = 'pro.civitaspo'
version = '0.1.2'

def digdagVersion = '0.9.41'
def scalaSemanticVersion = "2.13.1"
def depScalaVersion = "2.13"

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://dl.bintray.com/digdag/maven'
    }
}

dependencies {
    compile group: 'io.digdag', name: 'digdag-spi', version: digdagVersion
    compile group: 'io.digdag', name: 'digdag-plugin-utils', version: digdagVersion

    // https://mvnrepository.com/artifact/org.scala-lang/scala-library
    compile group: 'org.scala-lang', name: 'scala-library', version: scalaSemanticVersion

    ['ecs', 's3', 'sts'].each { svc ->
        // https://mvnrepository.com/artifact/com.amazonaws/
        compile group: 'com.amazonaws', name: "aws-java-sdk-${svc}", version: '1.11.930'
    }

    testCompile group: 'org.scalatest', name: "scalatest_$depScalaVersion", version: '3.0.8'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'io.digdag', name: 'digdag-cli', version: digdagVersion
}

shadowJar {
    classifier = null
    dependencies {
        exclude(dependency('io.digdag:.*'))
        exclude(dependency('.*:jackson.*:.*'))
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
    repositories {
        maven {
            if (System.getenv("GITHUB_TOKEN")) {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/civitaspo/digdag-operator-ecs_task")
                credentials {
                    username = "civitaspo"
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
            else {
                url "$buildDir/repo"
            }
        }
    }
}

spotless {
    scala {
        scalafmt('2.3.2').configFile('.scalafmt.conf')
    }
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

compileScala.options.encoding = 'UTF-8'
compileTestScala.options.encoding = 'UTF-8'
compileScala.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"

